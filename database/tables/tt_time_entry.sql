-- drop objects
declare
   l_cnt    pls_integer;
begin
   select count(*) into l_cnt from user_tables where table_name = upper('tt_time_entry');

   if (l_cnt > 0) then
      execute immediate 'drop table tt_time_entry cascade constraints purge';
   end if;
end;
/

-- create tables
create table tt_time_entry (
   id                number generated by default on null as identity,
   created           timestamp with time zone default current_timestamp not null,
   created_by        varchar2(255 char) default coalesce(sys_context('APEXSESSION', 'APP_USER'),
                                                         regexp_substr(sys_context('userenv','client_identifier'),'^[^:]*'),
                                                         sys_context('userenv','session_user')) not null,
   task_id           number,
   start_dt          timestamp with time zone default current_timestamp,
   end_dt            timestamp with time zone default current_timestamp,
   additional_info   varchar2(4000 char)
)
;

alter table tt_time_entry add constraint tt_time_entry_id__pk primary key (id);
alter table tt_time_entry add constraint tt_time_entry_task__fk foreign key (task_id) references tt_task_list(id) on delete cascade;

create index tt_time_entry__task_id on tt_time_entry(task_id);

comment on table tt_time_entry is 'Contains individual time entries for the task.';
comment on column tt_time_entry.id is 'Surrogate key.';
comment on column tt_time_entry.created is 'Date when record was inserted.';
comment on column tt_time_entry.created_by is 'Who created the record.';
comment on column tt_time_entry.task_id is 'Reference to task.';
comment on column tt_time_entry.start_dt is 'Indicates when task has started.';
comment on column tt_time_entry.end_dt is 'Indicates when task has finished.';
comment on column tt_time_entry.additional_info is 'Additional information about the entry task.';
